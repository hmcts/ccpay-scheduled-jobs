plugins {
    id 'java'
    id 'java-library'
    id 'jacoco'
    id 'org.owasp.dependencycheck' version '12.1.3'
    id 'org.sonarqube' version '6.2.0.5505'
    id 'io.spring.dependency-management' version '1.1.7'
}

group 'uk.gov.hmcts.reform.payment'


def javaLoggingVersion = '6.0.1'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url = 'https://pkgs.dev.azure.com/hmcts/Artifacts/_packaging/hmcts-lib/maven/v1' }
}


configurations.all {
    resolutionStrategy {
        eachDependency { DependencyResolveDetails det ->
            /* JAR upgrades with latest versions for CVE fixes*/

            /*   CVE-2020-17521 */
            if (det.requested.name == 'groovy-xml' || det.requested.name == 'groovy-json') {
                det.useVersion '4.0.22'
            }
            /* CVE-2020-13956 */
            if (det.requested.name == 'httpclient') {
                det.useVersion '4.5.13'
            }

            /* CVE-2024-47554 */
            if (det.requested.name == 'commons-io') {
                det.useVersion '2.14.0'
            }

            /*CVE-2021-44228, CVE-2021-44832, CVE-2021-45046, CVE-2021-45105*/
            if (det.requested.name == 'log4j-api' || det.requested.name == 'log4j-to-slf4j') {
                det.useVersion '2.17.1'
            }

            /* CVE CVE-2022-41854 */
            if (det.requested.name == 'snakeyaml') {
                det.useVersion '2.2'
            }

        }
    }
}

dependencies {
    implementation group: 'io.rest-assured', name: 'rest-assured', version: '5.5.5'

    implementation(group: 'com.github.hmcts', name: 'service-auth-provider-java-client', version: '5.3.3') {
        exclude group: 'com.google.guava', module: 'guava'
        exclude group: 'org.springframework.security', module: 'spring-security-crypto'
    }
    implementation group: 'org.bouncycastle', name: 'bcprov-jdk18on', version: '1.81'
    implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: '6.1.9'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: '3.3.5'
    implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: '4.3.0'
    implementation group: 'io.github.openfeign', name: 'feign-jackson', version: '13.6'
    implementation group: 'org.json', name: 'json', version: '20250517'

    testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: '3.3.5'

    testImplementation("org.wiremock:wiremock:3.13.1")
    testImplementation 'com.github.hmcts:fortify-client:1.4.9:all'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework:spring-framework-bom:6.2.8"
    }
}

task fortifyScan(type: JavaExec)  {
    mainClass = "uk.gov.hmcts.fortifyclient.FortifyClientMainApp"
    classpath += sourceSets.test.runtimeClasspath
    jvmArgs = ['--add-opens=java.base/java.lang.reflect=ALL-UNNAMED']
}

jacocoTestReport {
  executionData(test)
  reports {
    xml.required = true
    csv.required = false
    xml.outputLocation = file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport

test {
    useJUnitPlatform()
}

sonarqube {
  properties {
    property "sonar.projectName", "Reform :: payment-jobs"
    property "sonar.projectKey", "uk.gov.hmcts.reform:payment-jobs"
    property "sonar.coverage.exclusions", "**/JobProcessorConfiguration*,**JobProcessorApplication*"
    property "sonar.coverage.jacoco.xmlReportPaths", "${jacocoTestReport.reports.xml.outputLocation}"
  }
}


dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
  failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
  suppressionFile = 'config/owasp/suppressions.xml'

  analyzers {
    // Disable scanning of .NET related binaries
    assemblyEnabled = false
  }
}

jar {
    manifest {
        attributes  'Main-Class': 'JobProcessorApplication', 'Implementation-Title': project.name, 'Implementation-Version': project.version
    }

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }

    duplicatesStrategy(DuplicatesStrategy.INCLUDE)
}

tasks.withType(Copy) {
    filesMatching("**/*.yaml") {
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
    }
}

task copyToLib(type: Copy) {
    into "$buildDir/output/lib"
    from configurations.compileClasspath
}

plugins {
    id 'java'
    id 'java-library'
    id 'jacoco'
    id 'org.owasp.dependencycheck' version '6.0.1'
    id 'org.sonarqube' version '3.0'
}

group 'uk.gov.hmcts.reform.payment'

sourceCompatibility = 11
targetCompatibility = 11

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

repositories {
    mavenLocal()
    jcenter()
}


configurations.all {
    resolutionStrategy {
        eachDependency { DependencyResolveDetails det ->
            /* JAR upgrades with latest versions for CVE fixes*/

            /*
                CVE-2020-17521
            * */
            if (det.requested.name == 'groovy-xml' || det.requested.name == 'groovy-json') {
                det.useVersion '3.0.7'
            }

            if (det.requested.name == 'httpclient') {
                det.useVersion '4.5.13'
            }

            if (det.requested.name == 'org.apache.sling.javax.activation') {
                det.useVersion '0.2.0'
            }
        }
    }
}

dependencies {
    implementation group: 'io.rest-assured', name: 'rest-assured', version: '4.3.0'

    implementation(group: 'uk.gov.hmcts.reform', name: 'service-auth-provider-client', version: '3.1.2') {
        exclude group: 'com.google.guava', module: 'guava'
        exclude group: 'org.springframework.security', module: 'spring-security-crypto'
    }
    implementation group: 'org.json', name: 'json', version: '20140107'

    testImplementation("org.junit.jupiter:junit-jupiter-api:5.6.2")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.6.2")
    testImplementation 'com.github.tomakehurst:wiremock:2.26.3'
}

jacocoTestReport {
  executionData(test)
  reports {
    xml.enabled = true
    csv.enabled = false
    xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport

test {
    useJUnitPlatform()
}

sonarqube {
  properties {
    property "sonar.projectName", "Reform :: payment-jobs"
    property "sonar.projectKey", "uk.gov.hmcts.reform:payment-jobs"
    property "sonar.coverage.exclusions", "**/JobProcessorConfiguration*,**JobProcessorApplication*"
    property "sonar.coverage.jacoco.xmlReportPaths", "${jacocoTestReport.reports.xml.destination.path}"
  }
}


dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
  failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
  suppressionFile = 'config/owasp/suppressions.xml'

  analyzers {
    // Disable scanning of .NET related binaries
    assemblyEnabled = false
  }
}

jar {
    manifest {
        attributes  'Main-Class': 'JobProcessorApplication', 'Implementation-Title': project.name, 'Implementation-Version': project.version
    }

    from {
        configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
}

task copyToLib(type: Copy) {
    into "$buildDir/output/lib"
    from configurations.compileClasspath
}

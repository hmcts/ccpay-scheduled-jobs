plugins {
    id 'java'
    id 'maven'
    id 'maven-publish'
    id 'java-library'
    id 'jacoco'
    id "com.jfrog.bintray" version "1.8.4"
    id 'org.owasp.dependencycheck' version '5.2.4'
    id 'org.sonarqube' version '2.8'
}

group 'uk.gov.hmcts.reform.payment'

sourceCompatibility = 1.8
targetCompatibility = 1.8
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

repositories {
    maven { url "http://dl.bintray.com/hmcts/hmcts-maven/" }
    mavenLocal()
    jcenter()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    compile group: 'io.rest-assured', name: 'rest-assured', version: '4.3.0'
    implementation group: 'uk.gov.hmcts.reform', name: 'service-auth-provider-client', version: '3.1.1'
    compile group: 'org.json', name: 'json', version: '20140107'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '3.0.0'
}

jacocoTestReport {
  executionData(test)
  reports {
    xml.enabled = true
    csv.enabled = false
    xml.destination file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport

sonarqube {
  properties {
    property "sonar.projectName", "Reform :: payment-jobs"
    property "sonar.projectKey", "uk.gov.hmcts.reform:payment-jobs"
    property "sonar.coverage.jacoco.xmlReportPaths", "${jacocoTestReport.reports.xml.destination.path}"
  }
}


dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
  failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
  suppressionFile = 'config/owasp/suppressions.xml'

  analyzers {
    // Disable scanning of .NET related binaries
    assemblyEnabled = false
  }
}

jar {
    manifest { 
        attributes  'Main-Class': 'JobProcessorApplication', 'Implementation-Title': project.name, 'Implementation-Version': project.version
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

publishing {
    publications {
        Main(MavenPublication) {
            artifactId = 'fatJar'
        }
    }
}

task fatJar(type: Jar) {
    manifest.from jar.manifest
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    with jar
}
